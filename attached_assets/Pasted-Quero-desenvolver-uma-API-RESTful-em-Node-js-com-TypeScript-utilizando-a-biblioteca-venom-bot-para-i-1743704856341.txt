Quero desenvolver uma API RESTful em Node.js com TypeScript utilizando a biblioteca venom-bot para integra√ß√£o com o WhatsApp. A API deve permitir que m√∫ltiplos clientes criem suas pr√≥prias sess√µes, enviem mensagens e encerrem sess√µes atrav√©s de endpoints HTTP.

A persist√™ncia de dados ser√° feita utilizando PostgreSQL e TypeORM para armazenar informa√ß√µes sobre as sess√µes. Mensagens enviadas n√£o precisam ser armazenadas no banco de dados, apenas processadas e retornadas pela API. Durante o desenvolvimento, o uso de Nodemon √© obrigat√≥rio para facilitar o recarregamento autom√°tico do servidor.

O projeto deve seguir os princ√≠pios do SOLID para garantir um c√≥digo limpo, desacoplado e de f√°cil manuten√ß√£o.

üí° Requisitos Funcionais:

Gerenciamento de Sess√µes de WhatsApp:

Permitir que m√∫ltiplos clientes criem sess√µes √∫nicas identificadas por um sessionId.

Registrar cada sess√£o criada no banco de dados com os seguintes atributos:

id: UUID gerado automaticamente.

sessionId: Identificador √∫nico fornecido pelo cliente.

status: Status atual da sess√£o (iniciada, encerrada).

created_at: Data e hora de cria√ß√£o.

updated_at: Data e hora da √∫ltima atualiza√ß√£o.

Envio de Mensagens:

Permitir o envio de mensagens atrav√©s de sess√µes ativas, referenciadas pelo sessionId.

A API deve processar a mensagem e retornar o status de envio.

As mensagens n√£o devem ser armazenadas no banco de dados.

Encerramento de Sess√µes:

Permitir que clientes encerrem suas sess√µes de forma expl√≠cita atrav√©s de um endpoint.

Atualizar o status da sess√£o no banco de dados como encerrada.

üóÉÔ∏è Estrutura do Banco de Dados (PostgreSQL):

Tabela sessions:

id (UUID): Identificador √∫nico da sess√£o.

sessionId (String): Identificador fornecido pelo cliente.

status (String): Status atual da sess√£o (iniciada, encerrada).

created_at (Timestamp): Data e hora de cria√ß√£o da sess√£o.

updated_at (Timestamp): Data e hora da √∫ltima atualiza√ß√£o.

üöÄ Tecnologias e Depend√™ncias:

Node.js - Plataforma para constru√ß√£o do servidor.

TypeScript - Linguagem principal para desenvolvimento.

Express - Framework HTTP para gerenciamento de rotas e middlewares.

venom-bot - Biblioteca para integra√ß√£o com o WhatsApp.

PostgreSQL - Banco de dados relacional utilizado para persist√™ncia de sess√µes.

TypeORM - ORM para mapeamento de entidades e comunica√ß√£o com o banco de dados.

dotenv - Gerenciamento de vari√°veis de ambiente.

ts-node - Execu√ß√£o de c√≥digo TypeScript diretamente no ambiente Node.js.

nodemon - Ferramenta para recarregamento autom√°tico do servidor durante o desenvolvimento.

uuid - Gerador de identificadores √∫nicos para sess√µes.

üîë Endpoints Necess√°rios:

Criar Sess√£o:

M√©todo: POST

URL: /api/whatsapp/session

Body: { "sessionId": "cliente1" }

Retorno: Confirma√ß√£o da cria√ß√£o da sess√£o e detalhes (ex.: status, id).

Enviar Mensagem:

M√©todo: POST

URL: /api/whatsapp/message

Body: { "sessionId": "cliente1", "phoneNumber": "5511999999999", "message": "Ol√°!" }

Retorno: Status de envio da mensagem.

Encerrar Sess√£o:

M√©todo: DELETE

URL: /api/whatsapp/session

Body: { "sessionId": "cliente1" }

Retorno: Confirma√ß√£o de encerramento da sess√£o.

üìå Requisitos N√£o Funcionais:

C√≥digo organizado em camadas:

Controllers: Interface entre a API e o cliente, processa requisi√ß√µes e respostas.

Services: Regras de neg√≥cios e manipula√ß√£o dos dados.

Repositories: Comunica√ß√£o direta com o banco de dados usando TypeORM.

Entities: Modelos das tabelas no banco de dados.

Use Cases: Aplicar princ√≠pios SOLID para cada funcionalidade principal.

Aplicar Princ√≠pios SOLID:

Single Responsibility Principle (SRP): Cada classe ou m√≥dulo deve ter uma √∫nica responsabilidade.

Open/Closed Principle (OCP): C√≥digo deve ser aberto para extens√£o, mas fechado para modifica√ß√£o.

Liskov Substitution Principle (LSP): Objetos devem ser substitu√≠veis por suas classes derivadas sem quebrar o sistema.

Interface Segregation Principle (ISP): Interfaces espec√≠ficas para cada necessidade, evitando interfaces muito gen√©ricas.

Dependency Inversion Principle (DIP): Depender de abstra√ß√µes e n√£o de implementa√ß√µes concretas.

Documenta√ß√£o adequada no README.md.

Uso do Nodemon para desenvolvimento com recarregamento autom√°tico (npm run dev).

Uso de TypeScript para maior seguran√ßa e clareza no desenvolvimento.

C√≥digo transpilado para JavaScript (npm run build) para produ√ß√£o.